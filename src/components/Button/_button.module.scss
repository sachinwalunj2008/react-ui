@mixin button-base($backgroundColor, $borderColor) {
  background-color: $backgroundColor;
  border-color: $borderColor;
}

.leftHalf,
.rightHalf,
.button {
  // Needed because the default styles for button have a min-width
  min-width: auto;
  // Needed because the default styles for button have a height
  height: 36px;
  // Needed because the default border width for button is 2px
  border: 1px solid;
  padding: 0 16px;
  border-radius: 1000px;
  font-size: var(--font-size-xs);
  font-family: 'Montserrat', sans-serif;
  text-transform: uppercase;
  transition-property: color, background-color, border-color;
  transition-duration: 0.25s;
  transition-timing-function: ease;
  cursor: pointer;
  white-space: nowrap;
  &:hover {
    box-shadow: 0 2px 4px var(--button-shadow-color);
  }
  &:disabled,
  &.disabled {
    box-shadow: none;
    cursor: not-allowed;
    &:focus,
    &:active {
      box-shadow: none;
    }
  }
  &.disabled {
    pointer-events: none;
  }
}

.leftHalf,
.rightHalf {
  margin: 0;
}

.link {
  display: inline-flex;
  align-items: center;
  height: 34px;
}

.unstyled {
  all: unset;
  cursor: pointer;
  &:hover {
    box-shadow: none;
  }
}

.primaryFont {
  color: var(--white);
  font-weight: var(--font-weight-semibold);
}

.nonPrimaryFont {
  color: var(--purple);
  font-weight: var(--font-weight-light);
}

.primary-green {
  @include button-base(var(--green), var(--green));
  svg circle {
    fill: var(--green);
  }
  &:hover {
    @include button-base(var(--dark-green), var(--dark-green));
    svg circle {
      fill: var(--dark-green);
    }
  }
  &:active,
  &:focus {
    @include button-base(var(--medium-green), var(--green));
    box-shadow: 0px 3px 0px inset var(--dark-green);
    svg circle {
      fill: var(--green);
    }
    &.leftHalf {
      @include button-base(var(--light-green), var(--green));
    }
  }
  &:disabled,
  &.disabled {
    @include button-base(var(--light-green), var(--light-green));
    color: var(--medium-green);
    svg circle {
      fill: var(--medium-green);
    }
  }
}

.primary-blue {
  @include button-base(var(--blue), var(--blue));
  svg circle {
    fill: var(--blue);
  }
  &:hover {
    @include button-base(var(--dark-blue), var(--dark-blue));
    svg circle {
      fill: var(--dark-blue);
    }
  }
  &:active,
  &:focus {
    @include button-base(var(--medium-blue), var(--blue));
    box-shadow: 0px 3px 0px inset var(--dark-blue);
    svg circle {
      fill: var(--blue);
    }
    &.leftHalf {
      @include button-base(var(--light-blue), var(--blue));
    }
  }
  &:disabled,
  &.disabled {
    @include button-base(var(--light-blue), var(--light-blue));
    color: var(--medium-blue);
    svg circle {
      fill: var(--medium-blue);
    }
  }
}

.primary-red {
  @include button-base(var(--red), var(--red));
  svg circle {
    fill: var(--red);
  }
  &:hover {
    @include button-base(var(--dark-red), var(--dark-red));
    svg circle {
      fill: var(--dark-red);
    }
  }
  &:active,
  &:focus {
    @include button-base(var(--medium-red), var(--red));
    box-shadow: 0px 3px 0px inset var(--dark-red);
    svg circle {
      fill: var(--red);
    }
    &.leftHalf {
      @include button-base(var(--light-red), var(--red));
    }
  }
  &:disabled,
  &.disabled {
    @include button-base(var(--light-red), var(--light-red));
    color: var(--medium-red);
    svg circle {
      fill: var(--medium-red);
    }
  }
}

.secondary,
.tertiary {
  @include button-base(var(--white), var(--medium-purple));
  svg circle {
    fill: var(--medium-purple);
  }
  &:hover {
    background-color: var(--light-purple);
    color: var(--dark-purple);
    svg circle {
      fill: var(--purple);
    }
  }
  &:active,
  &:focus {
    @include button-base(var(--white), var(--medium-purple));
    color: var(--purple);
    box-shadow: 0px 3px 0px inset var(--medium-purple);
    svg circle {
      fill: var(--medium-purple);
    }
  }
  &:disabled,
  &.disabled {
    @include button-base(var(--white), var(--light-gray));
    color: var(--medium-gray);
    svg circle {
      fill: var(--medium-gray);
    }
  }
}

.tertiary {
  height: 30px;
}

.text-blue,
.text-red {
  background: none;
  border: none;
  padding: 0;
  text-decoration: underline;
  height: auto;
  &:hover {
    text-decoration: underline;
    box-shadow: none;
  }
}

.text-red {
  color: var(--red);
  &:hover {
    color: var(--dark-red);
  }
  &:disabled,
  &.disabled {
    color: var(--medium-red);
  }
}

.text-blue {
  color: var(--blue);
  &:hover {
    color: var(--dark-blue);
  }
  &:disabled,
  &.disabled {
    color: var(--medium-blue);
  }
}

.small {
  height: 24px; // Design specifies this height
  border-radius: 2px; // Design specifies this border-radius
  font-size: var(--font-size-xxs); // Design specifies this font-size
  padding: 0 8px;
  @include button-base(transparent, var(--blue));
  color: var(--blue);
  &:hover {
    background-color: var(--blue);
    color: var(--white);
  }
  &:active {
    @include button-base(var(--blue), var(--blue));
    color: var(--white);
  }
  &:disabled,
  &.disabled {
    @include button-base(var(--white), var(--light-gray));
    color: var(--medium-gray);
  }
}

.leftHalf {
  // default button styles come with a border-radius
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
  border-right-width: 0;
  // overriding default button padding
  padding: 0 8px 0 12px;
  svg circle {
    transition: all 0.25s ease;
  }
  &.primary-green,
  &.primary-blue,
  &.primary-red {
    background-color: var(--white);
    &:hover {
      border-right-color: transparent;
      background-color: var(--white);
    }
    &:disabled,
    &.disabled {
      border-color: inherit;
    }
  }
}

.rightHalf {
  // default button styles come with a border-radius
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
  white-space: nowrap;
  // overriding default button padding
  padding: 0 12px 0 8px;
  &.primary-red,
  &.primary-green,
  &.primary-blue {
    border-left-width: 0;
    &:disabled,
    &.disabled {
      border-color: inherit;
      border-left-width: 1px;
    }
  }
}

.flex {
  display: flex;
}

.alignItemsCenter {
  align-items: center;
}

.justifyContentCenter {
  justify-content: center;
}

.flexItemsCenter {
  @extend .flex;
  @extend .alignItemsCenter;
}
